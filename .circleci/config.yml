version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-<<parameters.workflow_id>>; then
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
      - revert-migrations:
          workflow_id: <<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = $(curl https://kvdb.io/Lrd6t8Z4bM7E9zWGBurA2v/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd .circleci/ansible/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i 
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      -  image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys:
            - "frontend-build"
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm i 
            npm run test
                
  test-backend:
    docker:
      -  image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run:
          name: run backend test
          command: |
            cd backend
            npm i 
            npm run test
            
  scan-frontend:
    docker:
      -  image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache: 
          keys:
            - "frontend-build"
      - run: 
          name: scan-front-end
          command: |
            cd frontend
            npm i 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      -  image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - "backend-build"
      - run: 
          name: scan-back-end
          command: |
            cd backend
            npm i
            npm audit fix
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-moemad-backend \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            
            export BACKEND_URL=$(aws cloudformation describe-stacks \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query "Stacks[0].Outputs[?OutputKey=='BackendURL'].OutputValue" \
              --no-paginate --output text)
            
            echo $BACKEND_URL
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-moemad-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text >> .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - run: ls ~/
      - run: ls ~/project/.circleci/ -a
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          name: DEPLOY - Add SSH keys
          fingerprints:
              - 30:3a:67:4c:94:58:58:64:7d:f2:95:19:75:62:93:35
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            cd  backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migration.log

      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." .circleci/ansible/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/Lrd6t8Z4bM7E9zWGBurA2v/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'            
            fi

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url
          command: |
            export API_URL=$(aws cloudformation describe-stacks \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query "Stacks[0].Outputs[?OutputKey=='BackendURL'].OutputValue" \
              --no-paginate --output text)
            export API_URL="http://${API_URL}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"      
                    
  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - add_ssh_keys:
          name: DEPLOY - Add SSH keys
          fingerprints:
              - 30:3a:67:4c:94:58:58:64:7d:f2:95:19:75:62:93:35
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible aws-cli openssh-client tar gzip
            
      # - run:
      #     name: compress backend
      #     command: |
      #       tar -C /tmp/artifacts/backend -czvf artifact.tar.gz .

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Get backend url
          command: |
            curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl \
              > backend-url.txt
      - run:
          name: Backend smoke test.
          command: |
            url=$(cat backend-url.txt)
            url="http://${url}:3030/api/status"
            curl $url
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            curl -s "${URL}"

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            echo "${OldWorkflowID}"
            echo "${STACKS[@]}"

            # save oldworkflowid for the cleanup phase
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${OldWorkflowID}" \
                https://api.memstash.io/values/oldworkflowid

            # promote
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name cloudfront-${OldWorkflowID} \
              --parameters ParameterKey=WorkflowID,ParameterValue=$CIRCLE_WORKFLOW_ID,UsePreviousValue=false

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"          
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name cloudfront-"${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]